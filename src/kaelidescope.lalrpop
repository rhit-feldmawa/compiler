use std::str::FromStr;
use lalrpop_util::ParseError;
use crate::ast::{Expr, Opcode, Func, FuncSignature, Extern, TopLevelStatement, Program};

grammar;

pub Program: Program = <TopLevelStatement*>;

TopLevelStatement: Box<TopLevelStatement> = {
    Func => Box::new(TopLevelStatement::Func(<>)),
    Extern => Box::new(TopLevelStatement::Extern(<>)),
    Expr => Box::new(TopLevelStatement::Expr(<>)),
}

Func: Box<Func> = {
    "def" <s:FuncSignature> <b:Expr> => Box::new(Func {
        signature: s,
        body: b,
    }),
};

Extern: Box<Extern> = {
    "extern" <s:FuncSignature> => Box::new(Extern {
        signature: s
    })
}

FuncSignature: Box<FuncSignature> = {
    <n:Identifier> "(" <a:Comma<Identifier>> ")" => Box::new(FuncSignature {
        name: n.to_string(),
        args: a,
    }),
}

Identifier: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string()
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Expr: Box<Expr> = Tier<ExprOp, Summand>;

ExprOp: Opcode = {
    "<" => Opcode::Lt,
    "<=" => Opcode::Le,
    ">" => Opcode::Gt,
    ">=" => Opcode::Ge,
}

pub Summand: Box<Expr> = Tier<SummandOp, Factor>;

SummandOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
}

Factor: Box<Expr> = Tier<FactorOp, Term>;

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
}

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};


pub Term = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")",
};

Num: i32 = {
    <s:r"[0-9]+"> =>? i32::from_str(s)
        .map_err(|_| ParseError::User {
            error: "number is too big"
        })
}
